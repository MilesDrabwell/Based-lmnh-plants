IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'based')
BEGIN
    EXEC('CREATE SCHEMA based');
END
GO
ALTER USER [alpha] WITH DEFAULT_SCHEMA = [based];

CREATE SEQUENCE SequenceName
START WITH 1
INCREMENT BY 1

IF OBJECT_ID('based.plant', 'U') IS NOT NULL DROP TABLE based.plant;
IF OBJECT_ID('based.botanist', 'U') IS NOT NULL DROP TABLE based.botanist;
IF OBJECT_ID('based.images', 'U') IS NOT NULL DROP TABLE based.images;
IF OBJECT_ID('based.plant_health', 'U') IS NOT NULL DROP TABLE based.plant_health;
IF OBJECT_ID('based.origin_location', 'U') IS NOT NULL DROP TABLE based.origin_location;
IF OBJECT_ID('based.license', 'U') IS NOT NULL DROP TABLE based.license;


CREATE TABLE based.botanist(
    botanist_id INT IDENTITY(1,1) PRIMARY KEY,
    name VARCHAR(MAX),
    email VARCHAR(MAX),
    phone VARCHAR(MAX)
);

CREATE TABLE based.origin_location(
    origin_location_id INT IDENTITY(1,1) PRIMARY KEY,
    latitude FLOAT,
    longitude FLOAT,
    locality_name VARCHAR(MAX),
    continent_name VARCHAR(MAX),
    city_name VARCHAR(MAX),
    country_code VARCHAR(MAX)
);

CREATE TABLE based.license(
    license_id INT DEFAULT NEXT VALUE FOR SequenceName PRIMARY KEY,
    license_name VARCHAR(MAX),
    license_url VARCHAR(MAX)
);


CREATE TABLE based.images(
    image_id INT IDENTITY(1,1) PRIMARY KEY,
    license_id INT,
    thumbnail_url VARCHAR(MAX),
    small_url VARCHAR(MAX),
    medium_url VARCHAR(MAX),
    regular_url VARCHAR(MAX),
    original_url VARCHAR(MAX),
    FOREIGN KEY (license_id) REFERENCES based.license (license_id)
);

-- Create the plant table
CREATE TABLE based.plant(
    plant_id INT DEFAULT NEXT VALUE FOR SequenceName PRIMARY KEY,
    plant_name VARCHAR(MAX),
    plant_scientific_name VARCHAR(MAX),
    botanist_id INT,
    image_id INT,
    origin_location_id INT,
    FOREIGN KEY (botanist_id) REFERENCES based.botanist (botanist_id),
    FOREIGN KEY (image_id) REFERENCES based.images (image_id),
    FOREIGN KEY (origin_location_id) REFERENCES based.origin_location (origin_location_id)
);

CREATE TABLE based.plant_health(
    plant_health_id INT IDENTITY(1,1) PRIMARY KEY,
    plant_id INT,
    recording_time DATETIME,
    soil_moisture FLOAT,
    temperature FLOAT,
    last_watered DATETIME,
    FOREIGN KEY (plant_id) REFERENCES based.plant (plant_id)
);